/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rivetlogic.assetmanagement.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import com.rivetlogic.assetmanagement.model.AssetLocation;
import com.rivetlogic.assetmanagement.service.AssetLocationLocalService;
import com.rivetlogic.assetmanagement.service.persistence.AssetCategoryPersistence;
import com.rivetlogic.assetmanagement.service.persistence.AssetLocationPersistence;
import com.rivetlogic.assetmanagement.service.persistence.AssetMessagePersistence;
import com.rivetlogic.assetmanagement.service.persistence.AssetPersistence;
import com.rivetlogic.assetmanagement.service.persistence.AssetRequestPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the asset location local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.rivetlogic.assetmanagement.service.impl.AssetLocationLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.rivetlogic.assetmanagement.service.impl.AssetLocationLocalServiceImpl
 * @see com.rivetlogic.assetmanagement.service.AssetLocationLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class AssetLocationLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements AssetLocationLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.rivetlogic.assetmanagement.service.AssetLocationLocalServiceUtil} to access the asset location local service.
	 */

	/**
	 * Adds the asset location to the database. Also notifies the appropriate model listeners.
	 *
	 * @param assetLocation the asset location
	 * @return the asset location that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AssetLocation addAssetLocation(AssetLocation assetLocation) {
		assetLocation.setNew(true);

		return assetLocationPersistence.update(assetLocation);
	}

	/**
	 * Creates a new asset location with the primary key. Does not add the asset location to the database.
	 *
	 * @param assetLocationId the primary key for the new asset location
	 * @return the new asset location
	 */
	@Override
	public AssetLocation createAssetLocation(long assetLocationId) {
		return assetLocationPersistence.create(assetLocationId);
	}

	/**
	 * Deletes the asset location with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param assetLocationId the primary key of the asset location
	 * @return the asset location that was removed
	 * @throws PortalException if a asset location with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AssetLocation deleteAssetLocation(long assetLocationId)
		throws PortalException {
		return assetLocationPersistence.remove(assetLocationId);
	}

	/**
	 * Deletes the asset location from the database. Also notifies the appropriate model listeners.
	 *
	 * @param assetLocation the asset location
	 * @return the asset location that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AssetLocation deleteAssetLocation(AssetLocation assetLocation) {
		return assetLocationPersistence.remove(assetLocation);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(AssetLocation.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return assetLocationPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rivetlogic.assetmanagement.model.impl.AssetLocationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return assetLocationPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rivetlogic.assetmanagement.model.impl.AssetLocationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return assetLocationPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return assetLocationPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return assetLocationPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public AssetLocation fetchAssetLocation(long assetLocationId) {
		return assetLocationPersistence.fetchByPrimaryKey(assetLocationId);
	}

	/**
	 * Returns the asset location matching the UUID and group.
	 *
	 * @param uuid the asset location's UUID
	 * @param groupId the primary key of the group
	 * @return the matching asset location, or <code>null</code> if a matching asset location could not be found
	 */
	@Override
	public AssetLocation fetchAssetLocationByUuidAndGroupId(String uuid,
		long groupId) {
		return assetLocationPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the asset location with the primary key.
	 *
	 * @param assetLocationId the primary key of the asset location
	 * @return the asset location
	 * @throws PortalException if a asset location with the primary key could not be found
	 */
	@Override
	public AssetLocation getAssetLocation(long assetLocationId)
		throws PortalException {
		return assetLocationPersistence.findByPrimaryKey(assetLocationId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(assetLocationLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AssetLocation.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("assetLocationId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(assetLocationLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(AssetLocation.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"assetLocationId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(assetLocationLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AssetLocation.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("assetLocationId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return assetLocationLocalService.deleteAssetLocation((AssetLocation)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return assetLocationPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the asset locations matching the UUID and company.
	 *
	 * @param uuid the UUID of the asset locations
	 * @param companyId the primary key of the company
	 * @return the matching asset locations, or an empty list if no matches were found
	 */
	@Override
	public List<AssetLocation> getAssetLocationsByUuidAndCompanyId(
		String uuid, long companyId) {
		return assetLocationPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of asset locations matching the UUID and company.
	 *
	 * @param uuid the UUID of the asset locations
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of asset locations
	 * @param end the upper bound of the range of asset locations (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching asset locations, or an empty list if no matches were found
	 */
	@Override
	public List<AssetLocation> getAssetLocationsByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<AssetLocation> orderByComparator) {
		return assetLocationPersistence.findByUuid_C(uuid, companyId, start,
			end, orderByComparator);
	}

	/**
	 * Returns the asset location matching the UUID and group.
	 *
	 * @param uuid the asset location's UUID
	 * @param groupId the primary key of the group
	 * @return the matching asset location
	 * @throws PortalException if a matching asset location could not be found
	 */
	@Override
	public AssetLocation getAssetLocationByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return assetLocationPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the asset locations.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rivetlogic.assetmanagement.model.impl.AssetLocationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of asset locations
	 * @param end the upper bound of the range of asset locations (not inclusive)
	 * @return the range of asset locations
	 */
	@Override
	public List<AssetLocation> getAssetLocations(int start, int end) {
		return assetLocationPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of asset locations.
	 *
	 * @return the number of asset locations
	 */
	@Override
	public int getAssetLocationsCount() {
		return assetLocationPersistence.countAll();
	}

	/**
	 * Updates the asset location in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param assetLocation the asset location
	 * @return the asset location that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AssetLocation updateAssetLocation(AssetLocation assetLocation) {
		return assetLocationPersistence.update(assetLocation);
	}

	/**
	 * Returns the asset local service.
	 *
	 * @return the asset local service
	 */
	public com.rivetlogic.assetmanagement.service.AssetLocalService getAssetLocalService() {
		return assetLocalService;
	}

	/**
	 * Sets the asset local service.
	 *
	 * @param assetLocalService the asset local service
	 */
	public void setAssetLocalService(
		com.rivetlogic.assetmanagement.service.AssetLocalService assetLocalService) {
		this.assetLocalService = assetLocalService;
	}

	/**
	 * Returns the asset persistence.
	 *
	 * @return the asset persistence
	 */
	public AssetPersistence getAssetPersistence() {
		return assetPersistence;
	}

	/**
	 * Sets the asset persistence.
	 *
	 * @param assetPersistence the asset persistence
	 */
	public void setAssetPersistence(AssetPersistence assetPersistence) {
		this.assetPersistence = assetPersistence;
	}

	/**
	 * Returns the asset category local service.
	 *
	 * @return the asset category local service
	 */
	public com.rivetlogic.assetmanagement.service.AssetCategoryLocalService getAssetCategoryLocalService() {
		return assetCategoryLocalService;
	}

	/**
	 * Sets the asset category local service.
	 *
	 * @param assetCategoryLocalService the asset category local service
	 */
	public void setAssetCategoryLocalService(
		com.rivetlogic.assetmanagement.service.AssetCategoryLocalService assetCategoryLocalService) {
		this.assetCategoryLocalService = assetCategoryLocalService;
	}

	/**
	 * Returns the asset category persistence.
	 *
	 * @return the asset category persistence
	 */
	public AssetCategoryPersistence getAssetCategoryPersistence() {
		return assetCategoryPersistence;
	}

	/**
	 * Sets the asset category persistence.
	 *
	 * @param assetCategoryPersistence the asset category persistence
	 */
	public void setAssetCategoryPersistence(
		AssetCategoryPersistence assetCategoryPersistence) {
		this.assetCategoryPersistence = assetCategoryPersistence;
	}

	/**
	 * Returns the asset location local service.
	 *
	 * @return the asset location local service
	 */
	public AssetLocationLocalService getAssetLocationLocalService() {
		return assetLocationLocalService;
	}

	/**
	 * Sets the asset location local service.
	 *
	 * @param assetLocationLocalService the asset location local service
	 */
	public void setAssetLocationLocalService(
		AssetLocationLocalService assetLocationLocalService) {
		this.assetLocationLocalService = assetLocationLocalService;
	}

	/**
	 * Returns the asset location persistence.
	 *
	 * @return the asset location persistence
	 */
	public AssetLocationPersistence getAssetLocationPersistence() {
		return assetLocationPersistence;
	}

	/**
	 * Sets the asset location persistence.
	 *
	 * @param assetLocationPersistence the asset location persistence
	 */
	public void setAssetLocationPersistence(
		AssetLocationPersistence assetLocationPersistence) {
		this.assetLocationPersistence = assetLocationPersistence;
	}

	/**
	 * Returns the asset message local service.
	 *
	 * @return the asset message local service
	 */
	public com.rivetlogic.assetmanagement.service.AssetMessageLocalService getAssetMessageLocalService() {
		return assetMessageLocalService;
	}

	/**
	 * Sets the asset message local service.
	 *
	 * @param assetMessageLocalService the asset message local service
	 */
	public void setAssetMessageLocalService(
		com.rivetlogic.assetmanagement.service.AssetMessageLocalService assetMessageLocalService) {
		this.assetMessageLocalService = assetMessageLocalService;
	}

	/**
	 * Returns the asset message persistence.
	 *
	 * @return the asset message persistence
	 */
	public AssetMessagePersistence getAssetMessagePersistence() {
		return assetMessagePersistence;
	}

	/**
	 * Sets the asset message persistence.
	 *
	 * @param assetMessagePersistence the asset message persistence
	 */
	public void setAssetMessagePersistence(
		AssetMessagePersistence assetMessagePersistence) {
		this.assetMessagePersistence = assetMessagePersistence;
	}

	/**
	 * Returns the asset request local service.
	 *
	 * @return the asset request local service
	 */
	public com.rivetlogic.assetmanagement.service.AssetRequestLocalService getAssetRequestLocalService() {
		return assetRequestLocalService;
	}

	/**
	 * Sets the asset request local service.
	 *
	 * @param assetRequestLocalService the asset request local service
	 */
	public void setAssetRequestLocalService(
		com.rivetlogic.assetmanagement.service.AssetRequestLocalService assetRequestLocalService) {
		this.assetRequestLocalService = assetRequestLocalService;
	}

	/**
	 * Returns the asset request persistence.
	 *
	 * @return the asset request persistence
	 */
	public AssetRequestPersistence getAssetRequestPersistence() {
		return assetRequestPersistence;
	}

	/**
	 * Sets the asset request persistence.
	 *
	 * @param assetRequestPersistence the asset request persistence
	 */
	public void setAssetRequestPersistence(
		AssetRequestPersistence assetRequestPersistence) {
		this.assetRequestPersistence = assetRequestPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.rivetlogic.assetmanagement.model.AssetLocation",
			assetLocationLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.rivetlogic.assetmanagement.model.AssetLocation");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return AssetLocationLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return AssetLocation.class;
	}

	protected String getModelClassName() {
		return AssetLocation.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = assetLocationPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.rivetlogic.assetmanagement.service.AssetLocalService.class)
	protected com.rivetlogic.assetmanagement.service.AssetLocalService assetLocalService;
	@BeanReference(type = AssetPersistence.class)
	protected AssetPersistence assetPersistence;
	@BeanReference(type = com.rivetlogic.assetmanagement.service.AssetCategoryLocalService.class)
	protected com.rivetlogic.assetmanagement.service.AssetCategoryLocalService assetCategoryLocalService;
	@BeanReference(type = AssetCategoryPersistence.class)
	protected AssetCategoryPersistence assetCategoryPersistence;
	@BeanReference(type = AssetLocationLocalService.class)
	protected AssetLocationLocalService assetLocationLocalService;
	@BeanReference(type = AssetLocationPersistence.class)
	protected AssetLocationPersistence assetLocationPersistence;
	@BeanReference(type = com.rivetlogic.assetmanagement.service.AssetMessageLocalService.class)
	protected com.rivetlogic.assetmanagement.service.AssetMessageLocalService assetMessageLocalService;
	@BeanReference(type = AssetMessagePersistence.class)
	protected AssetMessagePersistence assetMessagePersistence;
	@BeanReference(type = com.rivetlogic.assetmanagement.service.AssetRequestLocalService.class)
	protected com.rivetlogic.assetmanagement.service.AssetRequestLocalService assetRequestLocalService;
	@BeanReference(type = AssetRequestPersistence.class)
	protected AssetRequestPersistence assetRequestPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}